PACKRAT_LIBDIR 	= "$(R_HOME)/bin$(R_ARCH_BIN)/Rscript" -e ‘packrat::lib_dir()’

OS_NAME 				:= $(shell uname -s | tr A-Z a-z)

CXX 						= g++
NVCC        		= /usr/local/cuda-11.3/bin/nvcc

#MAIN_LDFLAGS = -L/usr/local/cuda-11.3/lib64

OPENMP_CXXFLAGS = $(SHLIB_OPENMP_CXXFLAGS)
OPENMP_LIBS 		= $(SHLIB_OPENMP_CXXFLAGS)

CUDA_XCOMPILER  = -fPIC,$(OPENMP_CXXFLAGS)
#CUDA_INCLUDES 	= -isystem /usr/local/cuda/include
CUDA_INCLUDES  = -isystem /usr/local/cuda-11.3/include
#CUDA_LIB    		= -L/usr/local/cuda/lib64 -lcudart
CUDA_LIB		= -L/usr/local/cuda-11.3/lib64 -lcudart

R_INCLUDES 			= -I $(R_INCLUDE_DIR) \
									# -I $(HOME)/R/x86_64-pc-linux-gnu-library/3.6/Rcpp/include \
									# -isystem $(HOME)/R/x86_64-pc-linux-gnu-library/3.6/RcppEigen/include 

ifeq ($(HPC), "TRUE")
NVCC        		= /share/apps/cuda/cuda-10.1/bin/nvcc
CUDA_INCLUDES 	= -I/share/apps/cuda/cuda-10.1/include
CUDA_LIB    		= -L/share/apps/cuda/cuda-10.1/lib64 -lcudart 
endif

ifeq ($(OS_NAME), darwin)
NVCC        		= /usr/local/cuda/bin/nvcc
OPENMP_CXXFLAGS = -Xpreprocessor -fopenmp
OPENMP_LIBS 		= -lomp
CUDA_XCOMPILER  = $(OPENMP_CXXFLAGS),\
									-Wno-unknown-pragmas,-Wno-everything,-Wno-overloaded-virtual
CUDA_INCLUDES 	= -isystem /usr/local/cuda/include
CUDA_LIB    		= -L/usr/local/cuda/lib/ -Wl -rpath /usr/local/cuda/lib -lcudart
R_INCLUDES 			= -I $(R_INCLUDE_DIR) \
									-I $(R_HOME)/library/Rcpp/include \
									-isystem $(R_HOME)/library/RcppEigen/include
endif

NVCC_TEST       := $(shell if [ -e $NVCC ]; then echo 1; fi) 

CXX_STD 				= CXX14

PKG_INCLUDES 		= -I ../inst/include

CPP_FLAGS       = -O3 -std=c++17 -Xpreprocessor -fopenmp -fPIC \
									-I/usr/local/include $(R_INCLUDES) $(PKG_INCLUDES) \
									$(ALL_CPPFLAGS)

NVCC_FLAGS  		= --x cu -std=c++14 -D__GPU 							\
									-Xcompiler "$(CUDA_XCOMPILER)" 					\
									-I/usr/local/include $(CUDA_INCLUDES) 	\
									$(R_INCLUDES) $(PKG_INCLUDES) 					\
									$(ALL_CPPFLAGS)
									
NVCC_LD_FLAGS		= $(CUDA_LIB) $(OPENMP_LIBS)

PKG_CPPFLAGS 		= $(CUDA_INCLUDES) $(PKG_INCLUDES) \
									# -Xcompiler $(OPENMP_CXXFLAGS) \
									# -DNDEBUG -D_FORTIFY_SOURCE=2 \
                                    # -Wformat \
                                    # -Wdate-time -Wno-ignored-attributes \
                                    # -Wno-unknown-pragmas -Wno-everything -Wno-overloaded-virtual 

ifeq (, $(shell which nvcc))
	PKG_LIBS = $(OPENMP_LIBS)
else
	PKG_LIBS = $(NVCC_LD_FLAGS)
endif
# Objects
API_OBJECTS			= mvt_dist.rcpp.o mvn_dist.rcpp.o samplers.rcpp.o run.rcpp.o \
									RcppExports.o
CPP_OBJECTS     = linear_algebra.o mcmc.o particle_filter.o samplers.o \
									utility.o
CXX_OBJECTS 		= statistics.cc.o
CUDA_OBJECTS		= statistics.cu.o mvn_dist.cu.o  mvt_dist.cu.o
# PKG_OBJECTS			=  
CUSMC_OBJECTS 	= $(PKG_OBJECTS) $(API_OBJECTS) $(CPP_OBJECTS) $(CXX_OBJECTS)

all: $(CUSMC_OBJECTS)

$(CUDA_OBJECTS):
	@if [ -e /usr/local/cuda/bin/nvcc ]; then 	\
	echo $(NVCC) -c $(NVCC_FLAGS) -o $@ $*.cpp; \
	$(NVCC) -c $(NVCC_FLAGS) -o $@ $*.cpp; 			\
	else 																				\
	echo "Skipping CUDA sources..";							\
	$(CXX) -c $(CPP_FLAGS) -o $@ $*.cpp; 			  \
	fi;

$(CXX_OBJECTS):
	@if [ -e /usr/local/cuda/bin/nvcc ]; then 		\
	echo $(NVCC) -c $(NVCC_FLAGS) -o $@ $*.cpp;		\
	$(NVCC) -c $(NVCC_FLAGS) -o $@ $*.cpp; 				\
	else 																					\
	echo $(CXX) -c $(CPP_FLAGS) -o $@ $*.cpp; 		\
	$(CXX) -c $(CPP_FLAGS) -o $@ $*.cpp; 					\
	fi;

$(CPP_OBJECTS):
	$(CXX) -c $(CPP_FLAGS) -o $@ $*.cpp

clean:
	rm $(OBJECTS)

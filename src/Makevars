PACKRAT_LIBDIR 	= "$(R_HOME)/bin$(R_ARCH_BIN)/Rscript" -e ‘packrat::lib_dir()’

OS_NAME 				:= $(shell uname -s | tr A-Z a-z)

NVCC_RESULT 		:= $(shell which nvcc)
NVCC_TEST 			:= $(notdir $(NVCC_RESULT))

GCC 						= g++
NVCC        		= /usr/local/cuda/bin/nvcc

OPENMP_CXXFLAGS = $(SHLIB_OPENMP_CXXFLAGS)
OPENMP_LIBS 		= $(SHLIB_OPENMP_CXXFLAGS)

CUDA_XCOMPILER  = -fPIC,$(OPENMP_CXXFLAGS)
CUDA_INCLUDES 	= -I/usr/local/cuda/include
CUDA_LIB    		= -L/usr/local/cuda/lib64 -lcudart

ifeq ($(HPC), "TRUE")
NVCC        		= /share/apps/cuda/cuda-10.1/bin/nvcc
CUDA_INCLUDES 	= -I/share/apps/cuda/cuda-10.1/include
CUDA_LIB    		= -L/share/apps/cuda/cuda-10.1/lib64 -lcudart 
endif

ifeq ($(OS_NAME), darwin)
NVCC        		= /usr/local/cuda/bin/nvcc
OPENMP_CXXFLAGS = -Xpreprocessor -fopenmp
OPENMP_LIBS 		= -lomp
CUDA_XCOMPILER  = $(OPENMP_CXXFLAGS)
CUDA_INCLUDES 	= -I/usr/local/cuda/include
CUDA_LIB    		= -L/usr/local/cuda/lib/ -Wl -rpath /usr/local/cuda/lib -lcudart 
endif

CXX_STD = CXX14

PKG_INCLUDES 		= -I ../inst/include 

R_INCLUDES 			= -I $(R_INCLUDE_DIR) \
									-I $(R_HOME)/library/Rcpp/include \
									-isystem $(R_HOME)/library/RcppEigen/include \
									-I $(HOME)/R/x86_64-pc-linux-gnu-library/3.6/Rcpp/include \
									-isystem $(HOME)/R/x86_64-pc-linux-gnu-library/3.6/RcppEigen/include 	

CXX_FLAGS       = -O3 --std=c++17 -Xpreprocessor -fopenmp -fPIC \
									-I/usr/local/include $(R_INCLUDES) $(PKG_INCLUDES)

NVCC_FLAGS  		= --x cu --std=c++14 -D__GPU -Xcompiler "$(CUDA_XCOMPILER)" \
									-I/usr/local/include -I$(CUDA_INCLUDES) $(R_INCLUDES) $(PKG_INCLUDES)
									
ifeq ($(NVCC_TEST), $(NVCC))
NVCC_LD_FLAGS		= $(CUDA_LIB) $(OPENMP_LIBS)
else
NVCC_LD_FLAGS		= $(OPENMP_LIBS)
endif

PKG_CPPFLAGS 		= $(CUDA_INCLUDES) $(PKG_INCLUDES) $(OPENMP_CXXFLAGS) \
									-DNDEBUG -Wformat -Werror=format-security -Wdate-time \
									-D_FORTIFY_SOURCE=2 -Wno-ignored-attributes -Wno-unknown-pragmas

PKG_LIBS 				= $(NVCC_LD_FLAGS)

API_OBJECTS			= mvtdist_rcpp.o mvndist_rcpp.o RcppExports.o rcpp_run.o

PKG_OBJECTS 		= linear_algebra.o mcmc.o particle_filter.o samplers.o \
									statistics.o utility.o

CUDA_OBJECTS		= mvn_dist.o

ifeq ($(NVCC_TEST), $(NVCC))
	OBJECTS = $(PKG_OBJECTS) $(CUDA_OBJECTS)
else
	OBJECTS = $(PKG_OBJECTS)
endif

all: $(OBJECTS)

$(CUDA_OBJECTS):
	$(NVCC) -c $(NVCC_FLAGS) -o $@ cuda/distributions/$*.cpp

$(PKG_OBJECTS):
ifeq ($(NVCC_TEST), $(NVCC))
	$(NVCC) -c $(NVCC_FLAGS) -o $@ $*.cpp
else
	$(GCC) -c $(CXX_FLAGS) -o $@ $*.cpp
endif

clean:
	rm $(OBJECTS)


